---
    - name: run show version on EOS devices
      eos_command:
        commands: "show version | json"
      register: eos_version
      tags:
        - always

    - name: Print some details regarding EOS devices
      debug:
        msg: "The device {{ inventory_hostname }} is a {{ eos_version.stdout_lines.0.modelName }} model running EOS version {{ eos_version.stdout_lines.0.version }}"
      tags:
        - always

    - name: collect power supplies status
      eos_command:
        commands: "show system environment power | json"
      register: power
      tags:
        - hardware

    - name: validate power supplies status
      assert:
        that:
          - item.value.state == 'ok'
        quiet: true
      loop: "{{ power.stdout_lines.0.powerSupplies | dict2items }}"
      ignore_errors: "{{ validation_mode_loose }}"
      tags:
        - hardware

    - name: collect fan status
      eos_command:
        commands: "show system environment cooling | json"
      register: fan
      tags:
        - hardware

    - name: validate fan status (power supplies)
      assert:
        that:
          - item.status == 'ok'
        quiet: true
      loop: "{{ fan.stdout_lines.0.powerSupplySlots }}"
      ignore_errors: "{{ validation_mode_loose }}"
      tags:
        - hardware

    - name: validate fan status (fan tray)
      assert:
        that:
          - item.status == 'ok'
        quiet: true
      loop: "{{ fan.stdout_lines.0.fanTraySlots }}"
      ignore_errors: "{{ validation_mode_loose }}"
      tags:
        - hardware

    - name: validate temperature
      eos_command:
        commands: "show system environment temperature | json"
        wait_for: result[0].systemStatus eq 'temperatureOk'
      ignore_errors: "{{ validation_mode_loose }}"
      tags:
        - hardware

    - name: collect transceivers inventory
      eos_command:
        commands: "show inventory | json"
      register: inventory
      tags:
        - hardware

    - name: validate transceivers manufacturers
      assert:
        that:
          - "item.value.mfgName in ['Not Present', 'Arastra, Inc.', 'Arista Networks']"
        quiet: true
      loop: "{{ inventory.stdout_lines.0.xcvrSlots | dict2items }}"
      ignore_errors: "{{ validation_mode_loose }}"
      tags:
        - hardware

    - name: validate reload cause
      eos_command:
        commands: "show reload cause | json"
        wait_for: result[0].resetCauses[0].description eq 'Reload requested by the user.'
        retries: 2
        interval: 2
      ignore_errors: "{{ validation_mode_loose }}"
      tags:
        - optional

    - name: include device intended structure configuration variables
      include_vars: '{{ inventory_dir }}/intended/structured_configs//{{ inventory_hostname }}.yml'
      delegate_to: localhost

    - name: validate NTP status
      eos_command:
        commands: "show ntp status"
        waitfor:
          - "result[0] contains 'synchronised to NTP server'"
        retries: 2
        interval: 2
      when: |
        (ntp_server.nodes is defined and ntp_server.nodes is not none)
      ignore_errors: "{{ validation_mode_loose }}"
      tags:
        - avd

    - name: validate interfaces admin state
      eos_command:
        commands: "show interfaces {{ item.key }} description | json"
        waitfor:
          - result[0].interfaceDescriptions.{{ item.key }}.interfaceStatus eq 'up'
        retries: 2
        interval: 2
      loop: "{{ ethernet_interfaces | default({}) | dict2items }}"
      when: |
        (ethernet_interfaces is defined and ethernet_interfaces is not none)
      ignore_errors: "{{ validation_mode_loose }}"
      tags:
        - avd

    - name: validate interfaces operational state
      eos_command:
        commands: "show interfaces {{ item.key }} description | json"
        waitfor:
          - result[0].interfaceDescriptions.{{ item.key }}.lineProtocolStatus eq 'up'
        retries: 2
        interval: 2
      loop: "{{ ethernet_interfaces | default({}) | dict2items }}"
      when: |
        (ethernet_interfaces is defined and ethernet_interfaces is not none)
      ignore_errors: "{{ validation_mode_loose }}"
      tags:
        - avd

    - name: validate LLDP topology
      eos_command:
        commands: "show lldp neighbors {{ item.key }} | json"
        waitfor:
          - "result[0].lldpNeighbors[0].neighborDevice eq {{ item.value.peer }}.{{ hostvars[item.value.peer]['dns_domain'] }}"
          - "result[0].lldpNeighbors[0].neighborPort eq {{ item.value.peer_interface }}"
        retries: 2
        interval: 2
      loop: "{{ ethernet_interfaces | default({}) | dict2items }}"
      when: |
        (ethernet_interfaces is defined and ethernet_interfaces is not none) and
        (item.value.peer is defined and item.value.peer is not none) and
        (item.value.peer_interface is defined and item.value.peer_interface is not none) and
        (hostvars[item.value.peer] is defined and hostvars[item.value.peer] is not none) and
        (hostvars[item.value.peer]['dns_domain'] is defined and hostvars[item.value.peer]['dns_domain'] is not none)
      ignore_errors: "{{ validation_mode_loose }}"
      tags:
        - avd

    - name: validate MLAG status
      eos_command:
        commands: "show mlag detail | json"
        waitfor:
          - "result[0].state eq 'active'"
          - "result[0].negStatus eq 'connected'"
        retries: 2
        interval: 2
      ignore_errors: "{{ validation_mode_loose }}"
      when: |
        (mlag_configuration is defined and mlag_configuration is not none)
      tags:
        - avd

    - name: validate IP reachability (directly connected)
      eos_command:
        commands: "ping {{ hostvars[item.value.peer]['ethernet_interfaces'][item.value.peer_interface]['ip_address'] | ipaddr('address')}} source {{ item.value.ip_address  | ipaddr('address')}} repeat 1"
        waitfor: result[0] contains '1 received'
        retries: 2
        interval: 2
      loop: "{{ethernet_interfaces | default({}) | dict2items}}"
      ignore_errors: "{{ validation_mode_loose }}"
      when: |
        (ethernet_interfaces is defined and ethernet_interfaces is not none) and
        (item.value.type is defined and item.value.type is not none and item.value.type == 'routed') and
        (item.value.ip_address is defined and item.value.ip_address is not none) and
        (item.value.peer is defined and item.value.peer is not none) and
        (item.value.peer_interface is defined and item.value.peer_interface is not none) and
        (hostvars[item.value.peer]['ethernet_interfaces'][item.value.peer_interface]['ip_address'] is defined and
        hostvars[item.value.peer]['ethernet_interfaces'][item.value.peer_interface]['ip_address'] is not none)
      tags:
        - avd

    - name: validate ArBGP is configured and operating
      eos_command:
        commands: "show ip route summary"
        waitfor:
          - "result[0] contains 'Operating routing protocol model: multi-agent'"
          - "result[0] contains 'Configured routing protocol model: multi-agent'"
        retries: 2
        interval: 2
      when: (hostvars.service_routing_protocols_model is defined and hostvars.service_routing_protocols_model == "multi-agent")
      ignore_errors: "{{ validation_mode_loose }}"
      tags:
        - avd

    - name: validate BGP sessions state
      eos_command:
        commands: "show ip bgp neighbors {{ item.key }} | json"
        waitfor:
          - "result[0].vrfs.default.peerList[0].state eq 'Established'"
        retries: 2
        interval: 2
      loop: "{{router_bgp.neighbors|default({})|dict2items}}"
      when: |
        (router_bgp is defined and router_bgp is not none) and
        (router_bgp.neighbors is defined and router_bgp.neighbors is not none) and
        (item.key is defined) and
        (item.value |length > 0)
      ignore_errors: "{{ validation_mode_loose }}"
      tags:
        - avd