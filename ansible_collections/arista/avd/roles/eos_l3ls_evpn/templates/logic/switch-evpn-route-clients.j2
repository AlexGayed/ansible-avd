{% if switch.evpn_role == "server" %}
{%     set switch.evpn_route_clients = {} %}
{# #}
{# Look for switches pointing to us as evpn_route_server #}
{%     for some_switch in groups[fabric_name] %}
{%         set some_switch_vars = hostvars[some_switch] %}
{%         if some_switch_vars.type is arista.avd.defined('l3leaf') %}
{%             for l3leaf_node_group in some_switch_vars.l3leaf.node_groups | arista.avd.natural_sort %}
{%                 for node in some_switch_vars.l3leaf.node_groups[l3leaf_node_group].nodes | arista.avd.natural_sort %}
{%                     if node == some_switch %}
{%                         set some_switch_evpn_role = some_switch_vars.l3leaf.node_groups[l3leaf_node_group].evpn_role | arista.avd.default(
                                                       some_switch_vars.l3leaf.defaults.evpn_role,
                                                       'client') %}
{%                         set some_switch_spines = some_switch_vars.l3leaf.node_groups[l3leaf_node_group].spines | arista.avd.default(
                                                    some_switch_vars.l3leaf.defaults.spines) %}
{%                         set some_switch_evpn_route_servers = some_switch_vars.l3leaf.node_groups[l3leaf_node_group].evpn_route_servers | arista.avd.default(
                                                                some_switch_vars.l3leaf.defaults.evpn_route_servers,
                                                                some_switch_spines,
                                                                []) %}
{%                         if inventory_hostname in some_switch_evpn_route_servers and some_switch_evpn_role in ['client', 'server'] %}
{# Found a matching l3leaf. Gathering information for this client #}
{%                             set client = namespace() %}
{%                             set client.id = some_switch_vars.l3leaf.node_groups[l3leaf_node_group].nodes[node].id %}
{%                             set client.bgp_as = some_switch_vars.l3leaf.node_groups[l3leaf_node_group].bgp_as | arista.avd.default(
                                                   some_switch_vars.l3leaf.defaults.bgp_as) %}
{%                             set client.ip_address = some_switch_vars.overlay_loopback_network_summary | ipaddr('network') | ipmath(client.id + some_switch_vars.spine.nodes | length) %}
{%                             do switch.evpn_route_clients.update({ some_switch: client }) %}
{%                         endif %}
{%                     endif %}
{%                 endfor %}
{%             endfor %}
{%         elif some_switch_vars.type is arista.avd.defined('spine') %}
{%             set some_switch_evpn_role = some_switch_vars.spine.nodes[some_switch].evpn_role | arista.avd.default(
                                           'server') %}
{%             set some_switch_evpn_route_servers = some_switch_vars.spine.nodes[some_switch].evpn_route_servers | arista.avd.default(
                                                    []) %}
{%             if inventory_hostname in some_switch_evpn_route_servers and some_switch_evpn_role in ['client', 'server'] %}
{# Found a matching spine. Gathering information for this client #}
{%                 set client = namespace() %}
{%                 set client.evpn_role = some_switch_evpn_role %}
{%                 set client.id = some_switch_vars.spine.nodes[some_switch].id %}
{%                 set client.bgp_as = some_switch_vars.spine.bgp_as | arista.avd.default %}
{%                 set client.ip_address = some_switch_vars.overlay_loopback_network_summary | ipaddr('network') | ipmath(client.id) %}
{%                 do switch.evpn_route_clients.update({ some_switch: client }) %}
{%             endif %}
{%         elif some_switch_vars.type is arista.avd.defined('super-spine') %}
{%             set some_switch_evpn_role = some_switch_vars.super_spine.nodes[some_switch].evpn_role | arista.avd.default %}
{%             set some_switch_evpn_route_servers = some_switch_vars.super_spine.nodes[some_switch].evpn_route_servers | arista.avd.default(
                                                    []) %}
{%             if inventory_hostname in some_switch_evpn_route_servers and some_switch_evpn_role in ['client', 'server'] %}
{# Found a matching super-spine. Gathering information for this client #}
{%                 set client = namespace() %}
{%                 set client.evpn_role = some_switch_evpn_role %}
{%                 set client.id = some_switch_vars.super_spine.nodes[some_switch].id %}
{%                 set client.bgp_as = some_switch_vars.super_spine.bgp_as | arista.avd.default %}
{%                 set client.ip_address = some_switch_vars.super_spine_loopback_network_summary  | ipaddr('network') | ipmath(client.id) %}
{%                 do switch.evpn_route_clients.update({ some_switch: client }) %}
{%             endif %}
{%         elif some_switch_vars.type is arista.avd.defined('overlay-controller') %}
{%             set some_switch_evpn_role = some_switch_vars.overlay_controller.nodes[some_switch].evpn_role | arista.avd.default %}
{%             set some_switch_evpn_route_servers = some_switch_vars.overlay_controller.nodes[some_switch].evpn_route_servers | arista.avd.default(
                                                    []) %}
{%             if inventory_hostname in some_switch_evpn_route_servers and some_switch_evpn_role in ['client', 'server'] %}
{# Found a matching overlay-controller. Gathering information for this client #}
{%                 set client = namespace() %}
{%                 set client.evpn_role = some_switch_evpn_role %}
{%                 set client.id = some_switch_vars.overlay_controller.nodes[some_switch].id %}
{%                 set client.bgp_as = some_switch_vars.overlay_controller.nodes[some_switch].bgp_as | arista.avd.default(
                                       overlay_controller.defaults.bgp_as) %}
{%                 set client.ip_address = some_switch_vars.overlay_controller_loopback_network_summary  | ipaddr('network') | ipmath(client.id) %}
{%                 do switch.evpn_route_clients.update({ some_switch: client }) %}
{%             endif %}
{%         endif %}
{%     endfor %}
{% endif %}
